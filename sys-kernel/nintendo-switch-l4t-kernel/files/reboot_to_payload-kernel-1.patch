From e7e77acd460d6f7e7adc6c87883e3a73dc0059d1 Mon Sep 17 00:00:00 2001
From: Ezekiel Bethel <zek@9net.org>
Date: Wed, 7 Aug 2019 23:28:09 +0100
Subject: [PATCH] pmc: add meme. this obviously needs to be sorted out.

---
 drivers/soc/tegra/pmc.c | 76 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 76 insertions(+)

diff --git a/drivers/soc/tegra/pmc.c b/drivers/soc/tegra/pmc.c
index 9cd40d182ed6..3a75bd6fc3e9 100644
--- a/drivers/soc/tegra/pmc.c
+++ b/drivers/soc/tegra/pmc.c
@@ -56,6 +56,7 @@
 #include <linux/regulator/consumer.h>
 #include <linux/uaccess.h>
 #include <linux/irqchip/tegra.h>
+#include <linux/firmware.h>
 
 #include <dt-bindings/soc/tegra-pmc.h>
 
@@ -5108,3 +5109,78 @@ static struct platform_driver tegra_pmc_iopower_driver = {
 };
 
 builtin_platform_driver(tegra_pmc_iopower_driver);
+
+#define ATMOSPHERE_COPY_TO_IRAM_COMMAND_ID    0xC2FFFE02
+#define ATMOSPHERE_DO_REBOOT_COMMAND_ID     0xC2FFFE03
+
+u32 ams_iram_copy(void *dram_addr, uint64_t iram_addr, uint32_t size, uint32_t flag)
+{
+	struct pmc_smc_regs regs;
+	regs.args[0] = virt_to_phys(dram_addr);
+	regs.args[1] = iram_addr;
+	regs.args[2] = size;
+	regs.args[3] = flag;
+	regs.args[4] = 0;
+	regs.args[5] = 0;
+	send_smc(ATMOSPHERE_COPY_TO_IRAM_COMMAND_ID, &regs);
+	return (u32)regs.args[0];
+}
+
+u32 ams_reboot_to_payload(void)
+{
+	struct pmc_smc_regs regs;
+	regs.args[0] = 0;
+	regs.args[1] = 0;
+	regs.args[2] = 0;
+	regs.args[3] = 0;
+	regs.args[4] = 0;
+	regs.args[5] = 0;
+	send_smc(ATMOSPHERE_DO_REBOOT_COMMAND_ID, &regs);
+	return (u32)regs.args[0];
+}
+
+static u8 iram_write_buff[0x1000];
+
+static int meme_driver_probe(struct platform_device *pdev)
+{
+	const struct firmware *reboot_payload_fw;
+	const u32 iram_payload_base = 0x40010000;
+	size_t i, size_remaining, copy_size;
+
+	// switch: send reboot payload. Should this actually be in pmc?
+
+	if(request_firmware_direct(&reboot_payload_fw, "reboot_payload.fw", &pdev->dev) == 0)
+	{
+		dev_info(&pdev->dev, "Let's go do some SMCs!");
+		size_remaining = reboot_payload_fw->size;
+		for(i = 0; i < reboot_payload_fw->size; i+=0x1000,size_remaining-=0x1000)
+		{
+			copy_size = size_remaining > 0x1000 ? 0x1000 : size_remaining;
+			memcpy(iram_write_buff, reboot_payload_fw->data + i, copy_size);
+			ams_iram_copy(iram_write_buff, iram_payload_base + i, 0x1000, 0);
+		}
+
+		ams_reboot_to_payload();
+	}
+	else
+	{
+		dev_err(&pdev->dev, "Failed to load firmware :(");
+	}
+	return 0;
+}
+
+static const struct of_device_id tegra_meme_match[] = {
+	{ .compatible = "tegra-meme", },
+	{ }
+};
+
+static struct platform_driver tegra_meme_driver = {
+	.probe   = meme_driver_probe,
+	.driver  = {
+		.name  = "tegra-meme",
+		.owner = THIS_MODULE,
+		.of_match_table = tegra_meme_match
+	},
+};
+
+builtin_platform_driver(tegra_meme_driver);
\ No newline at end of file
-- 
2.21.0

