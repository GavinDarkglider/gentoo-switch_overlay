From 657dfa1d177214784fda346681a89f86954a8179 Mon Sep 17 00:00:00 2001
From: Ezekiel Bethel <zek@9net.org>
Date: Thu, 8 Aug 2019 00:05:33 +0100
Subject: [PATCH] pmc: move into seperate file

---
 drivers/soc/tegra/Makefile             |   1 +
 drivers/soc/tegra/pmc-reboot2payload.c | 108 +++++++++++++++++++++++++
 drivers/soc/tegra/pmc.c                |  76 -----------------
 3 files changed, 109 insertions(+), 76 deletions(-)
 create mode 100644 drivers/soc/tegra/pmc-reboot2payload.c

diff --git a/drivers/soc/tegra/Makefile b/drivers/soc/tegra/Makefile
index 5ecadc6e9c31..ec7241167769 100644
--- a/drivers/soc/tegra/Makefile
+++ b/drivers/soc/tegra/Makefile
@@ -7,5 +7,6 @@ obj-y += pmc.o
 obj-y += cvb.o
 
 obj-$(CONFIG_ARCH_TEGRA_210_SOC)	+= pm-tegra210.o
+obj-$(CONFIG_ARCH_TEGRA_210_SOC)	+= pmc-reboot2payload.o
 obj-$(CONFIG_TEGRA_DVFS)       += tegra-dvfs.o
 obj-$(CONFIG_TEGRA_210_DVFS)   += tegra210-dvfs.o
diff --git a/drivers/soc/tegra/pmc-reboot2payload.c b/drivers/soc/tegra/pmc-reboot2payload.c
new file mode 100644
index 000000000000..11800164eb1c
--- /dev/null
+++ b/drivers/soc/tegra/pmc-reboot2payload.c
@@ -0,0 +1,108 @@
+#include <linux/kernel.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+#include <linux/firmware.h>
+
+#define NR_SMC_REGS		6
+
+struct pmc_smc_regs {
+	u64 args[NR_SMC_REGS];
+};
+
+static void send_smc(u32 func, struct pmc_smc_regs *regs)
+{
+	u32 ret = func;
+
+	asm volatile(
+		"mov x0, %0\n"
+		"ldp x1, x2, [%1, #16 * 0]\n"
+		"ldp x3, x4, [%1, #16 * 1]\n"
+		"ldp x5, x6, [%1, #16 * 2]\n"
+		"smc #0\n"
+		"mov %0, x0\n"
+		"stp x1, x2, [%1, #16 * 0]\n"
+		: "+r" (ret)
+		: "r" (regs)
+		: "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8",
+		  "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17");
+	if (ret) {
+			pr_err("%s: failed (ret=%d)\n", __func__, ret);
+			WARN_ON(1);
+	}
+}
+
+#define ATMOSPHERE_COPY_TO_IRAM_COMMAND_ID    0xC2FFFE02
+#define ATMOSPHERE_DO_REBOOT_COMMAND_ID     0xC2FFFE03
+
+u32 ams_iram_copy(void *dram_addr, uint64_t iram_addr, uint32_t size, uint32_t flag)
+{
+	struct pmc_smc_regs regs;
+	regs.args[0] = virt_to_phys(dram_addr);
+	regs.args[1] = iram_addr;
+	regs.args[2] = size;
+	regs.args[3] = flag;
+	regs.args[4] = 0;
+	regs.args[5] = 0;
+	send_smc(ATMOSPHERE_COPY_TO_IRAM_COMMAND_ID, &regs);
+	return (u32)regs.args[0];
+}
+
+u32 ams_reboot_to_payload(void)
+{
+	struct pmc_smc_regs regs;
+	regs.args[0] = 0;
+	regs.args[1] = 0;
+	regs.args[2] = 0;
+	regs.args[3] = 0;
+	regs.args[4] = 0;
+	regs.args[5] = 0;
+	send_smc(ATMOSPHERE_DO_REBOOT_COMMAND_ID, &regs);
+	return (u32)regs.args[0];
+}
+
+static u8 iram_write_buff[0x1000];
+
+static int reboot_to_payload_driver_probe(struct platform_device *pdev)
+{
+	const struct firmware *reboot_payload_fw;
+	const u32 iram_payload_base = 0x40010000;
+	size_t i, size_remaining, copy_size;
+
+	// switch: send reboot payload. Should this actually be in pmc?
+
+	if(request_firmware_direct(&reboot_payload_fw, "reboot_payload.fw", &pdev->dev) == 0)
+	{
+		dev_info(&pdev->dev, "Let's go do some SMCs!");
+		size_remaining = reboot_payload_fw->size;
+		for(i = 0; i < reboot_payload_fw->size; i+=0x1000,size_remaining-=0x1000)
+		{
+			copy_size = size_remaining > 0x1000 ? 0x1000 : size_remaining;
+			memcpy(iram_write_buff, reboot_payload_fw->data + i, copy_size);
+			ams_iram_copy(iram_write_buff, iram_payload_base + i, 0x1000, 0);
+		}
+
+		ams_reboot_to_payload();
+	}
+	else
+	{
+		dev_err(&pdev->dev, "Failed to load firmware :(");
+	}
+	return 0;
+}
+
+static const struct of_device_id tegra_reboot_to_payload_match[] = {
+	{ .compatible = "tegra-reboot2payload", },
+	{ }
+};
+
+static struct platform_driver tegra_reboot_to_payload_driver = {
+	.probe   = reboot_to_payload_driver_probe,
+	.driver  = {
+		.name  = "tegra-reboot2payload",
+		.owner = THIS_MODULE,
+		.of_match_table = tegra_reboot_to_payload_match
+	},
+};
+
+builtin_platform_driver(tegra_reboot_to_payload_driver);
\ No newline at end of file
diff --git a/drivers/soc/tegra/pmc.c b/drivers/soc/tegra/pmc.c
index 3a75bd6fc3e9..9cd40d182ed6 100644
--- a/drivers/soc/tegra/pmc.c
+++ b/drivers/soc/tegra/pmc.c
@@ -56,7 +56,6 @@
 #include <linux/regulator/consumer.h>
 #include <linux/uaccess.h>
 #include <linux/irqchip/tegra.h>
-#include <linux/firmware.h>
 
 #include <dt-bindings/soc/tegra-pmc.h>
 
@@ -5109,78 +5108,3 @@ static struct platform_driver tegra_pmc_iopower_driver = {
 };
 
 builtin_platform_driver(tegra_pmc_iopower_driver);
-
-#define ATMOSPHERE_COPY_TO_IRAM_COMMAND_ID    0xC2FFFE02
-#define ATMOSPHERE_DO_REBOOT_COMMAND_ID     0xC2FFFE03
-
-u32 ams_iram_copy(void *dram_addr, uint64_t iram_addr, uint32_t size, uint32_t flag)
-{
-	struct pmc_smc_regs regs;
-	regs.args[0] = virt_to_phys(dram_addr);
-	regs.args[1] = iram_addr;
-	regs.args[2] = size;
-	regs.args[3] = flag;
-	regs.args[4] = 0;
-	regs.args[5] = 0;
-	send_smc(ATMOSPHERE_COPY_TO_IRAM_COMMAND_ID, &regs);
-	return (u32)regs.args[0];
-}
-
-u32 ams_reboot_to_payload(void)
-{
-	struct pmc_smc_regs regs;
-	regs.args[0] = 0;
-	regs.args[1] = 0;
-	regs.args[2] = 0;
-	regs.args[3] = 0;
-	regs.args[4] = 0;
-	regs.args[5] = 0;
-	send_smc(ATMOSPHERE_DO_REBOOT_COMMAND_ID, &regs);
-	return (u32)regs.args[0];
-}
-
-static u8 iram_write_buff[0x1000];
-
-static int meme_driver_probe(struct platform_device *pdev)
-{
-	const struct firmware *reboot_payload_fw;
-	const u32 iram_payload_base = 0x40010000;
-	size_t i, size_remaining, copy_size;
-
-	// switch: send reboot payload. Should this actually be in pmc?
-
-	if(request_firmware_direct(&reboot_payload_fw, "reboot_payload.fw", &pdev->dev) == 0)
-	{
-		dev_info(&pdev->dev, "Let's go do some SMCs!");
-		size_remaining = reboot_payload_fw->size;
-		for(i = 0; i < reboot_payload_fw->size; i+=0x1000,size_remaining-=0x1000)
-		{
-			copy_size = size_remaining > 0x1000 ? 0x1000 : size_remaining;
-			memcpy(iram_write_buff, reboot_payload_fw->data + i, copy_size);
-			ams_iram_copy(iram_write_buff, iram_payload_base + i, 0x1000, 0);
-		}
-
-		ams_reboot_to_payload();
-	}
-	else
-	{
-		dev_err(&pdev->dev, "Failed to load firmware :(");
-	}
-	return 0;
-}
-
-static const struct of_device_id tegra_meme_match[] = {
-	{ .compatible = "tegra-meme", },
-	{ }
-};
-
-static struct platform_driver tegra_meme_driver = {
-	.probe   = meme_driver_probe,
-	.driver  = {
-		.name  = "tegra-meme",
-		.owner = THIS_MODULE,
-		.of_match_table = tegra_meme_match
-	},
-};
-
-builtin_platform_driver(tegra_meme_driver);
\ No newline at end of file
-- 
2.21.0

